openapi: 3.0.3
info:
  title: Books API - OpenAPI specification
  version: "1.0"
  description: |
      This is an API First example of Books API.
      
#      # Introduction
#
#      ## Use Cases
#
#      ### Use Case 1: Store a new Book in the library
#      ```mermaid
#      sequenceDiagram
#      actor Client
#    Client->>BooksApi: POST /books
#    BooksApi->>Library DB: save(book)
#    Library DB-->>BooksApi: Book
#    BooksApi-->>Client: Book resource
#      ```
#      ### Use Case 2: Get a book by isbn
#      ```mermaid
#      sequenceDiagram
#      actor Client
#    Client->>BooksApi: GET /books/{isbn}
#    BooksApi->>Library DB: find(isbn)
#    Library DB-->>BooksApi: Book
#    BooksApi-->>Client: Book resource
#      ```
#      ### Use Case 3: Get all books
#      ```mermaid
#      sequenceDiagram
#      actor Client
#    Client->>BooksApi: GET /books
#    BooksApi->>Library DB: findAll()
#    Library DB-->>BooksApi: List<Book>
#    BooksApi-->>Client: Book[]
#      ```
#
#      # Quickstart
#      Clone API from [github project](https://github.com/enisspahi/code-first-api-example) and run
#      ````
#      ./gradlew bootRun
#      ````
#      Then try out the api calls.

servers:
- url: http://localhost:8080
  description: Localhost server url
paths:
  /books:
    get:
      tags:
      - Books API
      summary: Show all books
      description: "Shows all books stored in the library"
      operationId: findAllBooks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
      - Books API
      summary: Create a book
      description: "Creates a book and stores it at the library"
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /books/{isbn}:
    get:
      tags:
      - Books API
      summary: Find book by isbn
      description: "Finds a book by searching with an isbn"
      operationId: findBookByIsbn
      parameters:
      - name: isbn
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          example: "Practical Design Patterns for Java Developers"
          description: "The title of the Book"
        author:
          type: string
          example: "Miroslav Wengner"
          description: "The author of the Book"
        isbn:
          type: string
          description: "The ISBN number"
